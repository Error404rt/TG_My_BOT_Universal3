"""
Handler for image conversion and artistic effects.
Provides various image processing options via interactive buttons.
"""

import logging
import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.utils.image_processing import (
    create_spiral_image,
    create_square_grid_image,
    create_hexagon_grid_image,
    create_triangle_grid_image,
    create_diamond_grid_image,
    create_pentagon_grid_image,
    create_double_spiral_image,
    save_image_to_bytes
)

logger = logging.getLogger(__name__)
router = Router()


class ImageProcessingState(StatesGroup):
    """States for image processing workflow"""
    waiting_for_image = State()
    waiting_for_effect_choice = State()
    waiting_for_spiral_params = State()
    waiting_for_grid_params = State()
    waiting_for_second_image = State()


@router.message(Command("phone_converter"))
async def start_image_converter(message: Message, state: FSMContext):
    """Start the image converter command"""
    try:
        await message.answer(
            "üñºÔ∏è **–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.",
            parse_mode="Markdown"
        )
        await state.set_state(ImageProcessingState.waiting_for_image)
    except Exception as e:
        logger.error(f"Error in start_image_converter: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(ImageProcessingState.waiting_for_image, F.photo)
async def receive_image(message: Message, state: FSMContext):
    """Receive image from user"""
    try:
        # Download the photo
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        
        # Create temporary file
        temp_dir = "./downloads"
        os.makedirs(temp_dir, exist_ok=True)
        temp_file = os.path.join(temp_dir, f"temp_image_{message.from_user.id}.jpg")
        
        # Download file
        await message.bot.download_file(file_info.file_path, temp_file)
        
        # Store file path in state
        await state.update_data(image_path=temp_file)
        
        # Show effect options
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåÄ –°–ø–∏—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", callback_data="effect_spiral")],
            [InlineKeyboardButton(text="‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data="effect_square")],
            [InlineKeyboardButton(text="‚¨° –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data="effect_hexagon")],
            [InlineKeyboardButton(text="üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data="effect_triangle")],
            [InlineKeyboardButton(text="üíé –†–æ–º–±–æ–≤–∞—è —Å–µ—Ç–∫–∞", callback_data="effect_diamond")],
            [InlineKeyboardButton(text="‚¨† –ü—è—Ç–∏—É–≥–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data="effect_pentagon")],
            [InlineKeyboardButton(text="üé® –î–≤–æ–π–Ω–∞—è —Å–ø–∏—Ä–∞–ª—å", callback_data="effect_double_spiral")],
        ])
        
        await message.answer(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=keyboard
        )
        await state.set_state(ImageProcessingState.waiting_for_effect_choice)
    
    except Exception as e:
        logger.error(f"Error in receive_image: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_spiral")
async def choose_spiral_params(callback: CallbackQuery, state: FSMContext):
    """Choose spiral parameters"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–æ–Ω–∫–∞—è (1)", callback_data="spiral_thick_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω—è—è (2)", callback_data="spiral_thick_2")],
            [InlineKeyboardButton(text="–¢–æ–ª—Å—Ç–∞—è (3)", callback_data="spiral_thick_3")],
            [InlineKeyboardButton(text="–û—á–µ–Ω—å —Ç–æ–ª—Å—Ç–∞—è (4)", callback_data="spiral_thick_4")],
        ])
        
        await callback.message.edit_text(
            "üåÄ **–°–ø–∏—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ª–∏–Ω–∏–∏ —Å–ø–∏—Ä–∞–ª–∏:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(ImageProcessingState.waiting_for_spiral_params)
    except Exception as e:
        logger.error(f"Error in choose_spiral_params: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(ImageProcessingState.waiting_for_spiral_params, F.data.startswith("spiral_thick_"))
async def process_spiral_image(callback: CallbackQuery, state: FSMContext):
    """Process image with spiral effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        thickness_map = {
            "spiral_thick_1": 1,
            "spiral_thick_2": 2,
            "spiral_thick_3": 3,
            "spiral_thick_4": 4,
        }
        thickness = thickness_map.get(callback.data, 2)
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_spiral_image(
            image_path,
            spiral_thickness=thickness,
            spiral_turns=50,
            size=300,
            n_shades=16,
            invert=False
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –°–ø–∏—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_spiral_image: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_square")
async def process_square_grid(callback: CallbackQuery, state: FSMContext):
    """Process image with square grid effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_square_grid_image(
            image_path,
            grid_size=50,
            size=300,
            n_shades=16,
            invert=False
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_square_grid: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_hexagon")
async def process_hexagon_grid(callback: CallbackQuery, state: FSMContext):
    """Process image with hexagon grid effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_hexagon_grid_image(
            image_path,
            grid_size=50,
            size=300,
            n_shades=16,
            invert=False
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_hexagon_grid: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_triangle")
async def process_triangle_grid(callback: CallbackQuery, state: FSMContext):
    """Process image with triangle grid effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_triangle_grid_image(
            image_path,
            grid_size=50,
            size=300,
            n_shades=16,
            invert=False
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_triangle_grid: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_diamond")
async def process_diamond_grid(callback: CallbackQuery, state: FSMContext):
    """Process image with diamond grid effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_diamond_grid_image(
            image_path,
            grid_size=50,
            size=300,
            n_shades=16,
            invert=False
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –†–æ–º–±–æ–≤–∞—è —Å–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_diamond_grid: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_pentagon")
async def process_pentagon_grid(callback: CallbackQuery, state: FSMContext):
    """Process image with pentagon grid effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_pentagon_grid_image(
            image_path,
            grid_size=50,
            size=300,
            n_shades=16,
            invert=False
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –ü—è—Ç–∏—É–≥–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_pentagon_grid: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.callback_query(ImageProcessingState.waiting_for_effect_choice, F.data == "effect_double_spiral")
async def process_double_spiral(callback: CallbackQuery, state: FSMContext):
    """Process image with double spiral effect"""
    try:
        await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        data = await state.get_data()
        image_path = data.get("image_path")
        
        result_image = create_double_spiral_image(
            image_path,
            image_path2=None,
            spiral_thickness=2,
            spiral_turns=50,
            size=300,
            n_shades=16
        )
        
        image_bytes = save_image_to_bytes(result_image)
        
        await callback.message.bot.send_photo(
            callback.from_user.id,
            photo=BufferedInputFile(image_bytes, filename="processed_image.png"),
            caption="‚úÖ –î–≤–æ–π–Ω–∞—è —Å–ø–∏—Ä–∞–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        
        await callback.message.delete()
        
        if os.path.exists(image_path):
            os.remove(image_path)
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_double_spiral: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()


@router.message(ImageProcessingState.waiting_for_image)
async def invalid_input(message: Message):
    """Handle invalid input"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ).")

